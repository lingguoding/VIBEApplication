package com.vibe.app.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.vibe.app.model.VibeType;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "VIBE_TYPE".
*/
public class VibeTypeDao extends AbstractDao<VibeType, Long> {

    public static final String TABLENAME = "VIBE_TYPE";

    /**
     * Properties of entity VibeType.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_ID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Icon = new Property(2, Integer.class, "icon", false, "ICON");
        public final static Property Time = new Property(3, Integer.class, "time", false, "TIME");
        public final static Property Rate = new Property(4, Integer.class, "rate", false, "RATE");
        public final static Property IsSelected = new Property(5, Boolean.class, "isSelected", false, "IS_SELECTED");
    };


    public VibeTypeDao(DaoConfig config) {
        super(config);
    }
    
    public VibeTypeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"VIBE_TYPE\" (" + //
                "\"_ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "\"NAME\" TEXT," + // 1: name
                "\"ICON\" INTEGER," + // 2: icon
                "\"TIME\" INTEGER," + // 3: time
                "\"RATE\" INTEGER," + // 4: rate
                "\"IS_SELECTED\" INTEGER);"); // 5: isSelected
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_VIBE_TYPE__ID ON VIBE_TYPE" +
                " (\"_ID\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"VIBE_TYPE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, VibeType entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        Integer icon = entity.getIcon();
        if (icon != null) {
            stmt.bindLong(3, icon);
        }
 
        Integer time = entity.getTime();
        if (time != null) {
            stmt.bindLong(4, time);
        }
 
        Integer rate = entity.getRate();
        if (rate != null) {
            stmt.bindLong(5, rate);
        }
 
        Boolean isSelected = entity.getIsSelected();
        if (isSelected != null) {
            stmt.bindLong(6, isSelected ? 1L: 0L);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public VibeType readEntity(Cursor cursor, int offset) {
        VibeType entity = new VibeType( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // icon
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // time
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // rate
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0 // isSelected
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, VibeType entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIcon(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setTime(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setRate(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setIsSelected(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(VibeType entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(VibeType entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
