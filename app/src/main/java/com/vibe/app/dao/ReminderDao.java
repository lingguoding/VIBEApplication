package com.vibe.app.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.vibe.app.model.Reminder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "REMINDER".
*/
public class ReminderDao extends AbstractDao<Reminder, Long> {

    public static final String TABLENAME = "REMINDER";

    /**
     * Properties of entity Reminder.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_ID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Flag = new Property(2, Integer.class, "flag", false, "FLAG");
        public final static Property Hour = new Property(3, Integer.class, "hour", false, "HOUR");
        public final static Property Minute = new Property(4, Integer.class, "minute", false, "MINUTE");
        public final static Property Week = new Property(5, Integer.class, "week", false, "WEEK");
        public final static Property Tips = new Property(6, String.class, "tips", false, "TIPS");
        public final static Property SoundOrVibrator = new Property(7, Integer.class, "soundOrVibrator", false, "SOUND_OR_VIBRATOR");
        public final static Property State = new Property(8, Integer.class, "state", false, "STATE");
    };


    public ReminderDao(DaoConfig config) {
        super(config);
    }
    
    public ReminderDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"REMINDER\" (" + //
                "\"_ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "\"NAME\" TEXT," + // 1: name
                "\"FLAG\" INTEGER," + // 2: flag
                "\"HOUR\" INTEGER," + // 3: hour
                "\"MINUTE\" INTEGER," + // 4: minute
                "\"WEEK\" INTEGER," + // 5: week
                "\"TIPS\" TEXT," + // 6: tips
                "\"SOUND_OR_VIBRATOR\" INTEGER," + // 7: soundOrVibrator
                "\"STATE\" INTEGER);"); // 8: state
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_REMINDER__ID ON REMINDER" +
                " (\"_ID\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"REMINDER\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Reminder entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        Integer flag = entity.getFlag();
        if (flag != null) {
            stmt.bindLong(3, flag);
        }
 
        Integer hour = entity.getHour();
        if (hour != null) {
            stmt.bindLong(4, hour);
        }
 
        Integer minute = entity.getMinute();
        if (minute != null) {
            stmt.bindLong(5, minute);
        }
 
        Integer week = entity.getWeek();
        if (week != null) {
            stmt.bindLong(6, week);
        }
 
        String tips = entity.getTips();
        if (tips != null) {
            stmt.bindString(7, tips);
        }
 
        Integer soundOrVibrator = entity.getSoundOrVibrator();
        if (soundOrVibrator != null) {
            stmt.bindLong(8, soundOrVibrator);
        }
 
        Integer state = entity.getState();
        if (state != null) {
            stmt.bindLong(9, state);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Reminder readEntity(Cursor cursor, int offset) {
        Reminder entity = new Reminder( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // flag
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // hour
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // minute
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // week
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // tips
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // soundOrVibrator
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8) // state
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Reminder entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFlag(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setHour(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setMinute(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setWeek(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setTips(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSoundOrVibrator(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setState(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Reminder entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Reminder entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
